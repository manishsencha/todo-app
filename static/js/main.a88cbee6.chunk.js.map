{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","Date","now","Todoitem","props","FormControlLabel","control","Checkbox","checked","color","label","App","useSelector","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAMMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aANmB,CACnBC,SAAU,IAMVC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMH,SAASK,KAAKD,EAAOE,UAE7BC,SAAS,SAACJ,EAAOC,GACfD,EAAMH,SAASQ,KAAI,SAAAC,GACdL,EAAOE,UAAYG,EAAKC,MACR,IAAdD,EAAKE,KACNF,EAAKE,MAAO,EAEZF,EAAKE,MAAO,U,EAQcf,EAAUgB,QAAjCV,E,EAAAA,SAAUK,E,EAAAA,SAEZM,EAAiB,SAACV,GAAD,OAAWA,EAAMW,MAAMd,UAEtCJ,IAAf,Q,OC1Be,SAASmB,IAAS,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAExBC,EAAWC,cAcjB,OACE,sBAAKC,UAAU,QAAf,UACE,uBACEC,KAAK,OACLC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOH,UAErC,wBAAQI,QAnBI,WACA,KAAVV,IACFE,EACEjB,EAAS,CACPO,KAAMQ,EACNN,MAAM,EACND,GAAIkB,KAAKC,SAGbX,EAAS,MAUT,oB,0BCvBS,SAASY,EAASC,GAC7B,IAAMZ,EAAWC,cAIjB,OACG,qBAAKC,UAAU,WAAf,SACC,cAACW,EAAA,EAAD,CACAC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAASJ,EAAMpB,KAAMa,SANvB,WACjBL,EAASZ,EAASwB,EAAMrB,MAKwC0B,MAAO,cACvEC,MAAON,EAAMjC,SCSNwC,MAhBf,WACE,IAAMtC,EAAWuC,YAAY1B,GAC7B,OACE,sBAAKQ,UAAU,MAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,qBAAf,SACGrB,EAASQ,KAAI,SAACC,GAAD,OACZ,cAACqB,EAAD,CAAUhC,KAAMW,EAAKA,KAAMC,GAAID,EAAKC,GAAIC,KAAMF,EAAKE,cAIzD,cAAC,EAAD,QChBO6B,EAAQC,YAAe,CAClCC,QAAS,CACP5B,MAAQ6B,KCQQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.a88cbee6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  todoList: [],\r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    saveTodo: (state, action) => {\r\n      state.todoList.push(action.payload);\r\n    },\r\n    setCheck:(state, action) => {\r\n      state.todoList.map(item=>{\r\n        if(action.payload === item.id) {\r\n          if(item.done === true) {\r\n            item.done = false;\r\n          }else {\r\n            item.done = true;\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n});\r\n\r\nexport const { saveTodo, setCheck } = todoSlice.actions;\r\n\r\nexport const selectTodoList = (state) => state.todos.todoList;\r\n\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport \"./Input.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { saveTodo } from \"../features/todoSlice\";\r\n\r\nexport default function Input() {\r\n  const [input, setInput] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const addTodo = () => {\r\n    if (input !== \"\") {\r\n      dispatch(\r\n        saveTodo({\r\n          item: input,\r\n          done: false,\r\n          id: Date.now(),\r\n        })\r\n      );\r\n      setInput(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n      />\r\n      <button onClick={addTodo}>Add</button>\r\n    </div>\r\n  );\r\n}\r\n","import { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './TodoItem.css'\r\nimport {useDispatch} from 'react-redux'\r\nimport {setCheck} from '../features/todoSlice'\r\nexport default function Todoitem(props) {\r\n    const dispatch = useDispatch();\r\n    const handleChange = () =>{\r\n        dispatch(setCheck(props.id));\r\n    }\r\n    return (\r\n       <div className=\"todoItem\">\r\n        <FormControlLabel\r\n        control={<Checkbox checked={props.done} onChange={handleChange} color =\"secondary\" />}\r\n        label={props.name}\r\n      />\r\n       </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./components/Input\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTodoList } from \"./features/todoSlice\";\r\nimport Todoitem from \"./components/TodoItem\";\r\n\r\nfunction App() {\r\n  const todoList = useSelector(selectTodoList);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app__container\">\r\n        <div className=\"app__todoContainer\">\r\n          {todoList.map((item) => (\r\n            <Todoitem name={item.item} id={item.id} done={item.done} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Input />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from '../features/todoSlice'\r\nexport const store = configureStore({\r\n  reducer: {\r\n    todos : todoReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}